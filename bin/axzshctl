#!/bin/zsh
#
# AX-ZSH: Alex' Modular ZSH Configuration
# Copyright (c) 2015-2016 Alexander Barton <alex@barton.de>
#

# Include "ax-common.sh", if available:
for dir ("$HOME/lib" "$HOME/.ax" /usr/local /opt/ax /usr); do
	[[ -z "$ax_common_sourced" ]] || break
	ax_common="${dir}/lib/ax/ax-common.sh"
	[[ -r "$ax_common" ]] && source "$ax_common"
done
if [[ -z "$ax_common_sourced" ]]; then
	function ax_msg {
		case "$1" in
		  "1"|"2") echo -n "! "; ;;
		  *) echo -n "* "; ;;
		esac
		shift
		echo "$@"
	}
fi
unset dir ax_common ax_common_sourced

function Usage {
	echo "Usage: $NAME <command> [...]"
	echo
	echo "  enable-plugin <name|directory> [<name|directory> [...]]"
	echo "    Enable plugin(s)."
	echo
	echo "  disable-plugin <name> [<name> [...]]"
	echo "    Disable plugin(s)."
	echo
	echo "  reset-plugins"
	echo "    Reset active plugins to the default set."
	echo
	echo "  enable-default-plugins"
	echo "    Enable all default plugins."
	echo
	echo "  set-theme <name>|-"
	echo "    Set active theme to <name>, or to the default."
	echo
	echo "  upgrade"
	echo "    Upgrade AX-ZSH installation (requires Git)."
	echo
	exit 2
}

function NormalizedPluginName {
	if [[ "$1" =~ "^[[:alnum:]-]+/[[:alnum:]_-]+$" ]]; then
		echo "$1" | sed -e 's|/|#|g'
	elif [[ "$1" =~ "/" ]]; then
		basename "$1"
	else
		echo "$1"
	fi
}

function EnablePlugin {
	local plugin=$(NormalizedPluginName "$1")
	local dir="$AXZSH/active_plugins"

	if [[ -h "$dir/$plugin" ]]; then
		ax_msg 1 "Plugin \"$1\" already active!"
		return 1
	fi

	if [[ "$1" =~ "^[[:alnum:]-]+/[[:alnum:]_-]+$" ]]; then
		# GitHub plugin
		mkdir -p "$AXZSH/repos"
		if [[ ! -e "$AXZSH/repos/$plugin" ]]; then
			ax_msg - "Cloning plugin from GitHub ..."
			git clone "https://github.com/$1.git" \
			 "$AXZSH/repos/$plugin"
		fi
	fi

	for dname (
		"$plugin:A"
		"$AXZSH_PLUGIN_D/$plugin"
		"$ZSH_CUSTOM/$plugin"
		"$AXZSH/custom_plugins/$plugin"
		"$AXZSH/repos/$plugin"
		"$AXZSH/plugins/$plugin"
		"$AXZSH/default_plugins/$plugin"
		"$AXZSH/core/$plugin"
	); do
		[[ ! -d "$dname" ]] && continue
		mkdir -p "$dir"
		(
			cd "$dir" || exit 9
			ln -sv "$dname" "$PWD"
		)
		return $?
	done

	ax_msg 2 "Plugin \"$1\" not found!"
	return 1
}

function DisablePlugin {
	local plugin=$(NormalizedPluginName "$1")
	local dir="$AXZSH/active_plugins"

	if [[ ! -h "$dir/$plugin" ]]; then
		ax_msg 1 "Plugin \"$1\" not active?"
		return 1
	fi

	rm -v "$dir/$plugin"; r=$?
	[ $r -eq 0 ] && rm -fr "$AXZSH/repos/$plugin"
	return $r
}

function ResetPlugins {
	local dir="$AXZSH/active_plugins"
	local r1=0, r2=0

	if [[ -e "$dir" ]]; then
		ax_msg - "Removing all symbolic links in $dir ..."
		find "$dir" -type l -print -delete; r1=$?
	fi

	ax_msg - "Removing all external repositories in \"$AXZSH/repos\" ..."
	rm -fr "$AXZSH/repos"; r2=$?

	[[ $r1 == 0 && $r2 == 0 ]] && return 0 || return 1
}

function EnableDefaultPlugins {
	local dir="$AXZSH/active_plugins"

	ax_msg - "Activating (linking) default plugins ..."
	mkdir -p "$dir"
	(
		cd "$dir" || exit 9
		ln -sfv "$AXZSH/default_plugins/"* "$PWD"
	)
	return $?
}

function SetTheme {
	local link_name="$AXZSH/active_theme"

	if [ $# -ne 1 ]; then
		echo "Usage: axzsh_set_theme <name|->"
		return 1
	fi

	rm -f "$link_name" || return 1

	if [ "$1" = "-" ]; then
		echo "Theme settings have been reset."
		return 0
	fi

	if [ -r "$1" ]; then
		theme="$1"
	elif [ -r "$AXZSH/custom_themes/$1.axzshtheme" ]; then
		theme="$AXZSH/custom_themes/$1.axzshtheme"
	elif [ -r "$AXZSH/themes/$1.axzshtheme" ]; then
		theme="$AXZSH/themes/$1.axzshtheme"
	else
		echo "Theme \"$1\" not found!"
		return 1
	fi
	ln -sv "$theme" "$link_name" || return 1
	return $?
}

function UpgradeAXZSH {
	if [[ $+commands[git] -eq 0 ]]; then
		ax_msg 2 "The git(1) command is not available!"
		return 1
	fi
	if [[ ! -d "$AXZSH/.git" ]]; then
		ax_msg 2 "AX-ZSH seems not to be installed using Git. Can't upgrade!"
		return 1
	fi

	ax_msg - "Upgrading AX-ZSH in \"$AXZSH\" using git(1) ..."
	( cd "$AXZSH" && git pull --ff-only )
}

function UpgradeForeignPlugins {
	if [[ $+commands[git] -eq 0 ]]; then
		ax_msg 2 "The git(1) command is not available!"
		return 1
	fi

	for dir ($AXZSH/repos/*(N)); do
		name=$(basename "$dir" | sed -e 's|#|/|g')
		if [ -d "$dir/.git" ]; then
			ax_msg - "Upgrading \"$name\" [git] ..."
			(
				cd "$dir"
				git pull --ff-only || ax_msg 2 "Pull failed!"
			)
		else
			ax_msg 2 "Unknown repository type!"
		fi
	done
}

NAME="$0:t"

[[ $# -gt 0 ]] || Usage

if [[ -z "$AXZSH" || ! -d "$AXZSH" ]]; then
	ax_msg 2 "Oops, \"AXZSH\" is not set or invalid!"
	exit 3
fi

cmd="$1"
shift

case "$cmd" in
	"enable-plugin")
		[[ $# -gt 0 ]] || Usage
		for plugin in "$@"; do
			EnablePlugin "$plugin"
		done
		;;
	"disable-plugin")
		[[ $# -gt 0 ]] || Usage
		for plugin in "$@"; do
			DisablePlugin "$plugin"
		done
		;;
	"reset-plugins")
		[[ $# -eq 0 ]] || Usage
		ResetPlugins
		EnableDefaultPlugins
		;;
	"enable-default-plugins")
		[[ $# -eq 0 ]] || Usage
		EnableDefaultPlugins
		;;
	"set-theme")
		[[ $# -eq 1 ]] || Usage
		SetTheme "$1"
		;;
	"upgrade")
		[[ $# -eq 0 ]] || Usage
		UpgradeAXZSH
		UpgradeForeignPlugins
		;;
	*)
		Usage
esac
